from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain.llms import OpenAI
import os

# LangChain Setting
llm = OpenAI(openai_api_key=os.environ["OPENAI_API_KEY"], temperature=0.7) # Creativity

# Template for Summarization
kr_summarize_template = """
당신은 어린이를 위해 동화를 요약하는 유능한 AI 어시스턴트입니다. 
다음 이야기를 다섯 줄 이상으로 요약해 주세요. 
요약에는 '주요 등장인물', '갈등 상황과 전개 과정', 그리고 '결론(또는 이야기에서 얻은 교훈)'의 세 구성요소가 꼭 포함되어야 합니다.
:\n{story}
"""
kr_summarize_prompt = PromptTemplate(input_variables=["story"], template=kr_summarize_template)
kr_summarize_chain = LLMChain(llm=llm, prompt=kr_summarize_prompt)

# Template for Q&A
kr_qa_template = """
당신은 어린이를 위해 동화에 대한 주요 내용을 바탕으로 퀴즈를 제공하는 유능한 AI 어시스턴트입니다. 
다음 이야기를 바탕으로, 특히 요약이나 교훈에 초점을 맞추어 *한 개의 객관식 질문*을 네 개의 선택지와 함께 생성하세요. 
각 질문에 대한 정답도 한국어로 제공하세요.
Story: {story}
Questions:
"""
kr_qa_prompt = PromptTemplate(input_variables=["story"], template=kr_qa_template)
kr_qa_chain = LLMChain(llm=llm, prompt=kr_qa_prompt)

# Example story
kr_story_text = subtitles

max_length = 1000  # Set a max character length for the story
if len(kr_story_text) > max_length:
    kr_story_text = kr_story_text[:max_length]

# Generate summary
kr_summary = kr_summarize_chain.run({"story": kr_story_text})

# Generate questions
kr_questions = kr_qa_chain.run({"story": kr_story_text})

print("Summary:\n", kr_summary)
print("\nQuestions:\n", kr_questions)  
